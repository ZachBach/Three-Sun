{"id":"ix21","dependencies":[{"name":"C:\\Users\\auern\\sun\\package.json","includedInParent":true,"mtime":1633399580424}],"generated":{"js":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nuniform vec2 pixels;\\nfloat PI = 3.141592653589793238;\\n\\nvarying vec3 vLayer0;\\nvarying vec3 vLayer1;\\nvarying vec3 vLayer2;\\nvarying vec3 eyeVector;\\nvarying vec3 vNormal;\\n\\nmat2 rotate(float a ) {\\n  float s = sin(a);\\n  float c = cos(a);\\n  return mat2(c, -s, s, c);\\n}\\n\\nvoid main() {\\n  vNormal = normal;\\n\\n  vec4 worldPosition = modelMatrix *vec4( position, 1.0);\\n  eyeVector = normalize(worldPosition.xyz - cameraPosition);\\n\\n  float t = time*0.005;\\n\\n mat2 rot = rotate(t);\\n\\n  vec3 p0 = position;\\n  p0.yz = rot*p0.yz;\\n  vLayer0 = p0;\\n\\n mat2 rot1 = rotate(t + 10.);\\n  vec3 p1 = position;\\n  p1.xz = rot1*p1.xz;\\n  vLayer1 = p1;\\n\\nmat2 rot2 = rotate(t + 30.);\\n  vec3 p2 = position;\\n  p2.xy = rot2*p2.xy;\\n  vLayer2 = p2;\\n\\n  vUv = uv;\\n  vPosition = position;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1. );\\n}\";"},"sourceMaps":{"js":{"mappings":[{"source":"js/shaderAround/vertex.glsl","name":"module","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"js/shaderAround/vertex.glsl","name":"exports","original":{"line":1,"column":7},"generated":{"line":1,"column":7}},{"source":"js/shaderAround/vertex.glsl","original":{"line":1,"column":15},"generated":{"line":1,"column":15}}],"sources":{"js/shaderAround/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nuniform vec2 pixels;\\nfloat PI = 3.141592653589793238;\\n\\nvarying vec3 vLayer0;\\nvarying vec3 vLayer1;\\nvarying vec3 vLayer2;\\nvarying vec3 eyeVector;\\nvarying vec3 vNormal;\\n\\nmat2 rotate(float a ) {\\n  float s = sin(a);\\n  float c = cos(a);\\n  return mat2(c, -s, s, c);\\n}\\n\\nvoid main() {\\n  vNormal = normal;\\n\\n  vec4 worldPosition = modelMatrix *vec4( position, 1.0);\\n  eyeVector = normalize(worldPosition.xyz - cameraPosition);\\n\\n  float t = time*0.005;\\n\\n mat2 rot = rotate(t);\\n\\n  vec3 p0 = position;\\n  p0.yz = rot*p0.yz;\\n  vLayer0 = p0;\\n\\n mat2 rot1 = rotate(t + 10.);\\n  vec3 p1 = position;\\n  p1.xz = rot1*p1.xz;\\n  vLayer1 = p1;\\n\\nmat2 rot2 = rotate(t + 30.);\\n  vec3 p2 = position;\\n  p2.xy = rot2*p2.xy;\\n  vLayer2 = p2;\\n\\n  vUv = uv;\\n  vPosition = position;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1. );\\n}\";"},"lineCount":null}},"error":null,"hash":"ca8084873f7848551c95e0be65256fd8","cacheData":{"env":{}}}